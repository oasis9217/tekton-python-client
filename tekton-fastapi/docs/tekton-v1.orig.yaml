openapi: 3.0.1
info:
  title: Tekton
  description: Tekton Pipeline
  version: v0.49.0
servers:
- url: /
paths: {}
components:
  schemas:
    pod.AffinityAssistantTemplate:
      type: object
      properties:
        imagePullSecrets:
          type: array
          description: ImagePullSecrets gives the name of the secret used by the pod
            to pull the image if specified
          items:
            $ref: '#/components/schemas/v1.LocalObjectReference'
          x-kubernetes-list-type: atomic
        nodeSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: 'NodeSelector is a selector which must be true for the pod
            to fit on a node. Selector which must match a node''s labels for the pod
            to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
        tolerations:
          type: array
          description: If specified, the pod's tolerations.
          items:
            $ref: '#/components/schemas/v1.Toleration'
          x-kubernetes-list-type: atomic
      description: AffinityAssistantTemplate holds pod specific configuration and
        is a subset of the generic pod Template
    pod.Template:
      type: object
      properties:
        affinity:
          $ref: '#/components/schemas/v1.Affinity'
        automountServiceAccountToken:
          type: boolean
          description: AutomountServiceAccountToken indicates whether pods running
            as this service account should have an API token automatically mounted.
        dnsConfig:
          $ref: '#/components/schemas/v1.PodDNSConfig'
        dnsPolicy:
          type: string
          description: Set DNS policy for the pod. Defaults to "ClusterFirst". Valid
            values are 'ClusterFirst', 'Default' or 'None'. DNS parameters given in
            DNSConfig will be merged with the policy selected with DNSPolicy.
        enableServiceLinks:
          type: boolean
          description: 'EnableServiceLinks indicates whether information about services
            should be injected into pod''s environment variables, matching the syntax
            of Docker links. Optional: Defaults to true.'
        env:
          type: array
          description: List of environment variables that can be provided to the containers
            belonging to the pod.
          items:
            $ref: '#/components/schemas/v1.EnvVar'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: name
        hostAliases:
          type: array
          description: HostAliases is an optional list of hosts and IPs that will
            be injected into the pod's hosts file if specified. This is only valid
            for non-hostNetwork pods.
          items:
            $ref: '#/components/schemas/v1.HostAlias'
          x-kubernetes-list-type: atomic
        hostNetwork:
          type: boolean
          description: HostNetwork specifies whether the pod may use the node network
            namespace
        imagePullSecrets:
          type: array
          description: ImagePullSecrets gives the name of the secret used by the pod
            to pull the image if specified
          items:
            $ref: '#/components/schemas/v1.LocalObjectReference'
          x-kubernetes-list-type: atomic
        nodeSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: 'NodeSelector is a selector which must be true for the pod
            to fit on a node. Selector which must match a node''s labels for the pod
            to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
        priorityClassName:
          type: string
          description: If specified, indicates the pod's priority. "system-node-critical"
            and "system-cluster-critical" are two special keywords which indicate
            the highest priorities with the former being the highest priority. Any
            other name must be defined by creating a PriorityClass object with that
            name. If not specified, the pod priority will be default or zero if there
            is no default.
        runtimeClassName:
          type: string
          description: 'RuntimeClassName refers to a RuntimeClass object in the node.k8s.io
            group, which should be used to run this pod. If no RuntimeClass resource
            matches the named class, the pod will not be run. If unset or empty, the
            "legacy" RuntimeClass will be used, which is an implicit class with an
            empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
            This is a beta feature as of Kubernetes v1.14.'
        schedulerName:
          type: string
          description: SchedulerName specifies the scheduler to be used to dispatch
            the Pod
        securityContext:
          $ref: '#/components/schemas/v1.PodSecurityContext'
        tolerations:
          type: array
          description: If specified, the pod's tolerations.
          items:
            $ref: '#/components/schemas/v1.Toleration'
          x-kubernetes-list-type: atomic
        topologySpreadConstraints:
          type: array
          description: TopologySpreadConstraints controls how Pods are spread across
            your cluster among failure-domains such as regions, zones, nodes, and
            other user-defined topology domains.
          items:
            $ref: '#/components/schemas/v1.TopologySpreadConstraint'
          x-kubernetes-list-type: atomic
        volumes:
          type: array
          description: 'List of volumes that can be mounted by containers belonging
            to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes'
          items:
            $ref: '#/components/schemas/v1.Volume'
          x-kubernetes-patch-strategy: merge,retainKeys
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: name
      description: Template holds pod specific configuration
    v1.ChildStatusReference:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        name:
          type: string
          description: Name is the name of the TaskRun or Run this is referencing.
        pipelineTaskName:
          type: string
          description: PipelineTaskName is the name of the PipelineTask this is referencing.
        whenExpressions:
          type: array
          description: WhenExpressions is the list of checks guarding the execution
            of the PipelineTask
          items:
            $ref: '#/components/schemas/v1.WhenExpression'
          x-kubernetes-list-type: atomic
      description: ChildStatusReference is used to point to the statuses of individual
        TaskRuns and Runs within this PipelineRun.
    v1.EmbeddedTask:
      type: object
      properties:
        apiVersion:
          type: string
        description:
          type: string
          description: Description is a user-facing description of the task that may
            be used to populate a UI.
        displayName:
          type: string
          description: DisplayName is a user-facing name of the task that may be used
            to populate a UI.
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/v1.PipelineTaskMetadata'
        params:
          type: array
          description: Params is a list of input parameters required to run the task.
            Params must be supplied as inputs in TaskRuns unless they declare a default
            value.
          items:
            $ref: '#/components/schemas/v1.ParamSpec'
          x-kubernetes-list-type: atomic
        results:
          type: array
          description: Results are values that this Task can output
          items:
            $ref: '#/components/schemas/v1.TaskResult'
          x-kubernetes-list-type: atomic
        sidecars:
          type: array
          description: Sidecars are run alongside the Task's step containers. They
            begin before the steps start and end after the steps complete.
          items:
            $ref: '#/components/schemas/v1.Sidecar'
          x-kubernetes-list-type: atomic
        spec:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.runtime.RawExtension'
        stepTemplate:
          $ref: '#/components/schemas/v1.StepTemplate'
        steps:
          type: array
          description: Steps are the steps of the build; each step is run sequentially
            with the source mounted into /workspace.
          items:
            $ref: '#/components/schemas/v1.Step'
          x-kubernetes-list-type: atomic
        volumes:
          type: array
          description: Volumes is a collection of volumes that are available to mount
            into the steps of the build.
          items:
            $ref: '#/components/schemas/v1.Volume'
          x-kubernetes-list-type: atomic
        workspaces:
          type: array
          description: Workspaces are the volumes that this Task requires.
          items:
            $ref: '#/components/schemas/v1.WorkspaceDeclaration'
          x-kubernetes-list-type: atomic
      description: EmbeddedTask is used to define a Task inline within a Pipeline's
        PipelineTasks.
    v1.IncludeParams:
      type: object
      properties:
        name:
          type: string
          description: Name the specified combination
        params:
          type: array
          description: Params takes only `Parameters` of type `"string"` The names
            of the `params` must match the names of the `params` in the underlying
            `Task`
          items:
            $ref: '#/components/schemas/v1.Param'
          x-kubernetes-list-type: atomic
      description: IncludeParams allows passing in a specific combinations of Parameters
        into the Matrix.
    v1.Matrix:
      type: object
      properties:
        include:
          type: array
          description: Include is a list of IncludeParams which allows passing in
            specific combinations of Parameters into the Matrix.
          items:
            $ref: '#/components/schemas/v1.IncludeParams'
          x-kubernetes-list-type: atomic
        params:
          type: array
          description: Params is a list of parameters used to fan out the pipelineTask
            Params takes only `Parameters` of type `"array"` Each array element is
            supplied to the `PipelineTask` by substituting `params` of type `"string"`
            in the underlying `Task`. The names of the `params` in the `Matrix` must
            match the names of the `params` in the underlying `Task` that they will
            be substituting.
          items:
            $ref: '#/components/schemas/v1.Param'
          x-kubernetes-list-type: atomic
      description: Matrix is used to fan out Tasks in a Pipeline
    v1.Param:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          default: ""
        value:
          $ref: '#/components/schemas/v1.ParamValue'
      description: Param declares an ParamValues to use for the parameter called name.
    v1.ParamSpec:
      required:
      - name
      type: object
      properties:
        default:
          $ref: '#/components/schemas/v1.ParamValue'
        description:
          type: string
          description: Description is a user-facing description of the parameter that
            may be used to populate a UI.
        name:
          type: string
          description: Name declares the name by which a parameter is referenced.
          default: ""
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1.PropertySpec'
          description: Properties is the JSON Schema properties to support key-value
            pairs parameter.
        type:
          type: string
          description: Type is the user-specified type of the parameter. The possible
            types are currently "string", "array" and "object", and "string" is the
            default.
      description: ParamSpec defines arbitrary parameters needed beyond typed inputs
        (such as resources). Parameter values are provided by users as inputs on a
        TaskRun or PipelineRun.
    v1.ParamValue:
      required:
      - ArrayVal
      - ObjectVal
      - StringVal
      - Type
      type: object
      properties:
        ArrayVal:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        ObjectVal:
          type: object
          additionalProperties:
            type: string
            default: ""
        StringVal:
          type: string
          description: Represents the stored type of ParamValues.
          default: ""
        Type:
          type: string
          default: ""
      description: ResultValue is a type alias of ParamValue
    v1.Pipeline:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.PipelineSpec'
      description: Pipeline describes a list of Tasks to execute. It expresses how
        outputs of tasks feed into inputs of subsequent tasks.
    v1.PipelineList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.Pipeline'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/v1.ListMeta'
      description: PipelineList contains a list of Pipeline
    v1.PipelineRef:
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent
        name:
          type: string
          description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names'
      description: PipelineRef can be used to refer to a specific instance of a Pipeline.
    v1.PipelineResult:
      required:
      - name
      - value
      type: object
      properties:
        description:
          type: string
          description: Description is a human-readable description of the result
          default: ""
        name:
          type: string
          description: Name the given name
          default: ""
        type:
          type: string
          description: Type is the user-specified type of the result. The possible
            types are 'string', 'array', and 'object', with 'string' as the default.
            'array' and 'object' types are alpha features.
        value:
          $ref: '#/components/schemas/v1.ParamValue'
      description: PipelineResult used to describe the results of a pipeline
    v1.PipelineRun:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.PipelineRunSpec'
        status:
          $ref: '#/components/schemas/v1.PipelineRunStatus'
      description: PipelineRun represents a single execution of a Pipeline. PipelineRuns
        are how the graph of Tasks declared in a Pipeline are executed; they specify
        inputs to Pipelines such as parameter values and capture operational aspects
        of the Tasks execution such as service account and tolerations. Creating a
        PipelineRun creates TaskRuns for Tasks in the referenced Pipeline.
    v1.PipelineRunList:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.PipelineRun'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/v1.ListMeta'
      description: PipelineRunList contains a list of PipelineRun
    v1.PipelineRunResult:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: Name is the result's name as declared by the Pipeline
          default: ""
        value:
          $ref: '#/components/schemas/v1.ParamValue'
      description: PipelineRunResult used to describe the results of a pipeline
    v1.PipelineRunRunStatus:
      type: object
      properties:
        pipelineTaskName:
          type: string
          description: PipelineTaskName is the name of the PipelineTask.
        status:
          $ref: '#/components/schemas/github.com.tektoncd.pipeline.pkg.apis.run.v1beta1.CustomRunStatus'
        whenExpressions:
          type: array
          description: WhenExpressions is the list of checks guarding the execution
            of the PipelineTask
          items:
            $ref: '#/components/schemas/v1.WhenExpression'
          x-kubernetes-list-type: atomic
      description: PipelineRunRunStatus contains the name of the PipelineTask for
        this Run and the Run's Status
    v1.PipelineRunSpec:
      type: object
      properties:
        params:
          type: array
          description: Params is a list of parameter names and values.
          items:
            $ref: '#/components/schemas/v1.Param'
          x-kubernetes-list-type: atomic
        pipelineRef:
          $ref: '#/components/schemas/v1.PipelineRef'
        pipelineSpec:
          $ref: '#/components/schemas/v1.PipelineSpec'
        status:
          type: string
          description: Used for cancelling a pipelinerun (and maybe more later on)
        taskRunSpecs:
          type: array
          description: TaskRunSpecs holds a set of runtime specs
          items:
            $ref: '#/components/schemas/v1.PipelineTaskRunSpec'
          x-kubernetes-list-type: atomic
        taskRunTemplate:
          $ref: '#/components/schemas/v1.PipelineTaskRunTemplate'
        timeouts:
          $ref: '#/components/schemas/v1.TimeoutFields'
        workspaces:
          type: array
          description: Workspaces holds a set of workspace bindings that must match
            names with those declared in the pipeline.
          items:
            $ref: '#/components/schemas/v1.WorkspaceBinding'
          x-kubernetes-list-type: atomic
      description: PipelineRunSpec defines the desired state of PipelineRun
    v1.PipelineRunStatus:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: Annotations is additional Status fields for the Resource to
            save some additional State as well as convey more information to the user.
            This is roughly akin to Annotations on any k8s resource, just the reconciler
            conveying richer information outwards.
        childReferences:
          type: array
          description: list of TaskRun and Run names, PipelineTask names, and API
            versions/kinds for children of this PipelineRun.
          items:
            $ref: '#/components/schemas/v1.ChildStatusReference'
          x-kubernetes-list-type: atomic
        completionTime:
          $ref: '#/components/schemas/v1.Time'
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/knative.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        finallyStartTime:
          $ref: '#/components/schemas/v1.Time'
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        pipelineSpec:
          $ref: '#/components/schemas/v1.PipelineSpec'
        provenance:
          $ref: '#/components/schemas/v1.Provenance'
        results:
          type: array
          description: Results are the list of results written out by the pipeline
            task's containers
          items:
            $ref: '#/components/schemas/v1.PipelineRunResult'
          x-kubernetes-list-type: atomic
        skippedTasks:
          type: array
          description: list of tasks that were skipped due to when expressions evaluating
            to false
          items:
            $ref: '#/components/schemas/v1.SkippedTask'
          x-kubernetes-list-type: atomic
        spanContext:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: SpanContext contains tracing span context fields
        startTime:
          $ref: '#/components/schemas/v1.Time'
      description: PipelineRunStatus defines the observed state of PipelineRun
    v1.PipelineRunStatusFields:
      type: object
      properties:
        childReferences:
          type: array
          description: list of TaskRun and Run names, PipelineTask names, and API
            versions/kinds for children of this PipelineRun.
          items:
            $ref: '#/components/schemas/v1.ChildStatusReference'
          x-kubernetes-list-type: atomic
        completionTime:
          $ref: '#/components/schemas/v1.Time'
        finallyStartTime:
          $ref: '#/components/schemas/v1.Time'
        pipelineSpec:
          $ref: '#/components/schemas/v1.PipelineSpec'
        provenance:
          $ref: '#/components/schemas/v1.Provenance'
        results:
          type: array
          description: Results are the list of results written out by the pipeline
            task's containers
          items:
            $ref: '#/components/schemas/v1.PipelineRunResult'
          x-kubernetes-list-type: atomic
        skippedTasks:
          type: array
          description: list of tasks that were skipped due to when expressions evaluating
            to false
          items:
            $ref: '#/components/schemas/v1.SkippedTask'
          x-kubernetes-list-type: atomic
        spanContext:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: SpanContext contains tracing span context fields
        startTime:
          $ref: '#/components/schemas/v1.Time'
      description: PipelineRunStatusFields holds the fields of PipelineRunStatus'
        status. This is defined separately and inlined so that other types can readily
        consume these fields via duck typing.
    v1.PipelineRunTaskRunStatus:
      type: object
      properties:
        pipelineTaskName:
          type: string
          description: PipelineTaskName is the name of the PipelineTask.
        status:
          $ref: '#/components/schemas/v1.TaskRunStatus'
        whenExpressions:
          type: array
          description: WhenExpressions is the list of checks guarding the execution
            of the PipelineTask
          items:
            $ref: '#/components/schemas/v1.WhenExpression'
          x-kubernetes-list-type: atomic
      description: PipelineRunTaskRunStatus contains the name of the PipelineTask
        for this TaskRun and the TaskRun's Status
    v1.PipelineSpec:
      type: object
      properties:
        description:
          type: string
          description: Description is a user-facing description of the pipeline that
            may be used to populate a UI.
        displayName:
          type: string
          description: DisplayName is a user-facing name of the pipeline that may
            be used to populate a UI.
        finally:
          type: array
          description: Finally declares the list of Tasks that execute just before
            leaving the Pipeline i.e. either after all Tasks are finished executing
            successfully or after a failure which would result in ending the Pipeline
          items:
            $ref: '#/components/schemas/v1.PipelineTask'
          x-kubernetes-list-type: atomic
        params:
          type: array
          description: Params declares a list of input parameters that must be supplied
            when this Pipeline is run.
          items:
            $ref: '#/components/schemas/v1.ParamSpec'
          x-kubernetes-list-type: atomic
        results:
          type: array
          description: Results are values that this pipeline can output once run
          items:
            $ref: '#/components/schemas/v1.PipelineResult'
          x-kubernetes-list-type: atomic
        tasks:
          type: array
          description: Tasks declares the graph of Tasks that execute when this Pipeline
            is run.
          items:
            $ref: '#/components/schemas/v1.PipelineTask'
          x-kubernetes-list-type: atomic
        workspaces:
          type: array
          description: Workspaces declares a set of named workspaces that are expected
            to be provided by a PipelineRun.
          items:
            $ref: '#/components/schemas/v1.PipelineWorkspaceDeclaration'
          x-kubernetes-list-type: atomic
      description: PipelineSpec defines the desired state of Pipeline.
    v1.PipelineTask:
      type: object
      properties:
        description:
          type: string
          description: Description is the description of this task within the context
            of a Pipeline. This description may be used to populate a UI.
        displayName:
          type: string
          description: DisplayName is the display name of this task within the context
            of a Pipeline. This display name may be used to populate a UI.
        matrix:
          $ref: '#/components/schemas/v1.Matrix'
        name:
          type: string
          description: Name is the name of this task within the context of a Pipeline.
            Name is used as a coordinate with the `from` and `runAfter` fields to
            establish the execution order of tasks relative to one another.
        params:
          type: array
          description: Parameters declares parameters passed to this task.
          items:
            $ref: '#/components/schemas/v1.Param'
          x-kubernetes-list-type: atomic
        retries:
          type: integer
          description: 'Retries represents how many times this task should be retried
            in case of task failure: ConditionSucceeded set to False'
          format: int32
        runAfter:
          type: array
          description: RunAfter is the list of PipelineTask names that should be executed
            before this Task executes. (Used to force a specific ordering in graph
            execution.)
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        taskRef:
          $ref: '#/components/schemas/v1.TaskRef'
        taskSpec:
          $ref: '#/components/schemas/v1.EmbeddedTask'
        timeout:
          $ref: '#/components/schemas/v1.Duration'
        when:
          type: array
          description: When is a list of when expressions that need to be true for
            the task to run
          items:
            $ref: '#/components/schemas/v1.WhenExpression'
        workspaces:
          type: array
          description: Workspaces maps workspaces from the pipeline spec to the workspaces
            declared in the Task.
          items:
            $ref: '#/components/schemas/v1.WorkspacePipelineTaskBinding'
          x-kubernetes-list-type: atomic
      description: PipelineTask defines a task in a Pipeline, passing inputs from
        both Params and from the output of previous tasks.
    v1.PipelineTaskMetadata:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
            default: ""
        labels:
          type: object
          additionalProperties:
            type: string
            default: ""
      description: PipelineTaskMetadata contains the labels or annotations for an
        EmbeddedTask
    v1.PipelineTaskParam:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          default: ""
        value:
          type: string
          default: ""
      description: PipelineTaskParam is used to provide arbitrary string parameters
        to a Task.
    v1.PipelineTaskRun:
      type: object
      properties:
        name:
          type: string
      description: PipelineTaskRun reports the results of running a step in the Task.
        Each task has the potential to succeed or fail (based on the exit code) and
        produces logs.
    v1.PipelineTaskRunSpec:
      type: object
      properties:
        computeResources:
          $ref: '#/components/schemas/v1.ResourceRequirements'
        metadata:
          $ref: '#/components/schemas/v1.PipelineTaskMetadata'
        pipelineTaskName:
          type: string
        podTemplate:
          $ref: '#/components/schemas/pod.Template'
        serviceAccountName:
          type: string
        sidecarSpecs:
          type: array
          items:
            $ref: '#/components/schemas/v1.TaskRunSidecarSpec'
          x-kubernetes-list-type: atomic
        stepSpecs:
          type: array
          items:
            $ref: '#/components/schemas/v1.TaskRunStepSpec'
          x-kubernetes-list-type: atomic
      description: PipelineTaskRunSpec  can be used to configure specific specs for
        a concrete Task
    v1.PipelineTaskRunTemplate:
      type: object
      properties:
        podTemplate:
          $ref: '#/components/schemas/pod.Template'
        serviceAccountName:
          type: string
      description: PipelineTaskRunTemplate is used to specify run specifications for
        all Task in pipelinerun.
    v1.PipelineWorkspaceDeclaration:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: Description is a human readable string describing how the workspace
            will be used in the Pipeline. It can be useful to include a bit of detail
            about which tasks are intended to have access to the data on the workspace.
        name:
          type: string
          description: Name is the name of a workspace to be provided by a PipelineRun.
          default: ""
        optional:
          type: boolean
          description: Optional marks a Workspace as not being required in PipelineRuns.
            By default this field is false and so declared workspaces are required.
      description: |-
        WorkspacePipelineDeclaration creates a named slot in a Pipeline that a PipelineRun is expected to populate with a workspace binding.

        Deprecated: use PipelineWorkspaceDeclaration type instead
    v1.PropertySpec:
      type: object
      properties:
        type:
          type: string
      description: PropertySpec defines the struct for object keys
    v1.Provenance:
      type: object
      properties:
        featureFlags:
          $ref: '#/components/schemas/github.com.tektoncd.pipeline.pkg.apis.config.FeatureFlags'
        refSource:
          $ref: '#/components/schemas/v1.RefSource'
      description: Provenance contains metadata about resources used in the TaskRun/PipelineRun
        such as the source from where a remote build definition was fetched. This
        field aims to carry minimum amoumt of metadata in *Run status so that Tekton
        Chains can capture them in the provenance.
    v1.RefSource:
      type: object
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: 'Digest is a collection of cryptographic digests for the contents
            of the artifact specified by URI. Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}'
        entryPoint:
          type: string
          description: 'EntryPoint identifies the entry point into the build. This
            is often a path to a build definition file and/or a target label within
            that file. Example: "task/git-clone/0.8/git-clone.yaml"'
        uri:
          type: string
          description: 'URI indicates the identity of the source of the build definition.
            Example: "https://github.com/tektoncd/catalog"'
      description: RefSource contains the information that can uniquely identify where
        a remote built definition came from i.e. Git repositories, Tekton Bundles
        in OCI registry and hub.
    v1.ResolverRef:
      type: object
      properties:
        params:
          type: array
          description: Params contains the parameters used to identify the referenced
            Tekton resource. Example entries might include "repo" or "path" but the
            set of params ultimately depends on the chosen resolver.
          items:
            $ref: '#/components/schemas/v1.Param'
          x-kubernetes-list-type: atomic
        resolver:
          type: string
          description: Resolver is the name of the resolver that should perform resolution
            of the referenced Tekton resource, such as "git".
      description: ResolverRef can be used to refer to a Pipeline or Task in a remote
        location like a git repo. This feature is in beta and these fields are only
        available when the beta feature gate is enabled.
    v1.ResultRef:
      required:
      - pipelineTask
      - property
      - result
      - resultsIndex
      type: object
      properties:
        pipelineTask:
          type: string
          default: ""
        property:
          type: string
          default: ""
        result:
          type: string
          default: ""
        resultsIndex:
          type: integer
          format: int32
          default: 0
      description: ResultRef is a type that represents a reference to a task run result
    v1.Sidecar:
      required:
      - name
      type: object
      properties:
        args:
          type: array
          description: 'Arguments to the entrypoint. The image''s CMD is used if this
            is not provided. Variable references $(VAR_NAME) are expanded using the
            Sidecar''s environment. If a variable cannot be resolved, the reference
            in the input string will be unchanged. Double $$ are reduced to a single
            $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
            will produce the string literal "$(VAR_NAME)". Escaped references will
            never be expanded, regardless of whether the variable exists or not. Cannot
            be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        command:
          type: array
          description: 'Entrypoint array. Not executed within a shell. The image''s
            ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)
            are expanded using the Sidecar''s environment. If a variable cannot be
            resolved, the reference in the input string will be unchanged. Double
            $$ are reduced to a single $, which allows for escaping the $(VAR_NAME)
            syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
            Escaped references will never be expanded, regardless of whether the variable
            exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        computeResources:
          $ref: '#/components/schemas/v1.ResourceRequirements'
        env:
          type: array
          description: List of environment variables to set in the Sidecar. Cannot
            be updated.
          items:
            $ref: '#/components/schemas/v1.EnvVar'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: name
        envFrom:
          type: array
          description: List of sources to populate environment variables in the Sidecar.
            The keys defined within a source must be a C_IDENTIFIER. All invalid keys
            will be reported as an event when the container is starting. When a key
            exists in multiple sources, the value associated with the last source
            will take precedence. Values defined by an Env with a duplicate key will
            take precedence. Cannot be updated.
          items:
            $ref: '#/components/schemas/v1.EnvFromSource'
          x-kubernetes-list-type: atomic
        image:
          type: string
          description: 'Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images
            This field is optional to allow higher level config management to default
            or override container images in workload controllers like Deployments
            and StatefulSets.'
        imagePullPolicy:
          type: string
          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults
            to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot
            be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
        lifecycle:
          $ref: '#/components/schemas/v1.Lifecycle'
        livenessProbe:
          $ref: '#/components/schemas/v1.Probe'
        name:
          type: string
          description: Name of the Sidecar specified as a DNS_LABEL. Each Sidecar
            in a Task must have a unique name (DNS_LABEL). Cannot be updated.
          default: ""
        ports:
          type: array
          description: List of ports to expose from the Sidecar. Exposing a port here
            gives the system additional information about the network connections
            a container uses, but is primarily informational. Not specifying a port
            here DOES NOT prevent that port from being exposed. Any port which is
            listening on the default "0.0.0.0" address inside a container will be
            accessible from the network. Cannot be updated.
          items:
            $ref: '#/components/schemas/v1.ContainerPort'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: map
          x-kubernetes-list-map-keys:
          - containerPort
          - protocol
          x-kubernetes-patch-merge-key: containerPort
        readinessProbe:
          $ref: '#/components/schemas/v1.Probe'
        script:
          type: string
          description: |-
            Script is the contents of an executable file to execute.

            If Script is not empty, the Step cannot have an Command or Args.
        securityContext:
          $ref: '#/components/schemas/v1.SecurityContext'
        startupProbe:
          $ref: '#/components/schemas/v1.Probe'
        stdin:
          type: boolean
          description: Whether this Sidecar should allocate a buffer for stdin in
            the container runtime. If this is not set, reads from stdin in the Sidecar
            will always result in EOF. Default is false.
        stdinOnce:
          type: boolean
          description: Whether the container runtime should close the stdin channel
            after it has been opened by a single attach. When stdin is true the stdin
            stream will remain open across multiple attach sessions. If stdinOnce
            is set to true, stdin is opened on Sidecar start, is empty until the first
            client attaches to stdin, and then remains open and accepts data until
            the client disconnects, at which time stdin is closed and remains closed
            until the Sidecar is restarted. If this flag is false, a container processes
            that reads from stdin will never receive an EOF. Default is false
        terminationMessagePath:
          type: string
          description: 'Optional: Path at which the file to which the Sidecar''s termination
            message will be written is mounted into the Sidecar''s filesystem. Message
            written is intended to be brief final status, such as an assertion failure
            message. Will be truncated by the node if greater than 4096 bytes. The
            total message length across all containers will be limited to 12kb. Defaults
            to /dev/termination-log. Cannot be updated.'
        terminationMessagePolicy:
          type: string
          description: Indicate how the termination message should be populated. File
            will use the contents of terminationMessagePath to populate the Sidecar
            status message on both success and failure. FallbackToLogsOnError will
            use the last chunk of Sidecar log output if the termination message file
            is empty and the Sidecar exited with an error. The log output is limited
            to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot
            be updated.
        tty:
          type: boolean
          description: Whether this Sidecar should allocate a TTY for itself, also
            requires 'stdin' to be true. Default is false.
        volumeDevices:
          type: array
          description: volumeDevices is the list of block devices to be used by the
            Sidecar.
          items:
            $ref: '#/components/schemas/v1.VolumeDevice'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: devicePath
        volumeMounts:
          type: array
          description: Volumes to mount into the Sidecar's filesystem. Cannot be updated.
          items:
            $ref: '#/components/schemas/v1.VolumeMount'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: mountPath
        workingDir:
          type: string
          description: Sidecar's working directory. If not specified, the container
            runtime's default will be used, which might be configured in the container
            image. Cannot be updated.
        workspaces:
          type: array
          description: |-
            This is an alpha field. You must set the "enable-api-fields" feature flag to "alpha" for this field to be supported.

            Workspaces is a list of workspaces from the Task that this Sidecar wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.
          items:
            $ref: '#/components/schemas/v1.WorkspaceUsage'
          x-kubernetes-list-type: atomic
      description: Sidecar has nearly the same data structure as Step but does not
        have the ability to timeout.
    v1.SidecarState:
      type: object
      properties:
        container:
          type: string
        imageID:
          type: string
        name:
          type: string
        running:
          $ref: '#/components/schemas/v1.ContainerStateRunning'
        terminated:
          $ref: '#/components/schemas/v1.ContainerStateTerminated'
        waiting:
          $ref: '#/components/schemas/v1.ContainerStateWaiting'
      description: SidecarState reports the results of running a sidecar in a Task.
    v1.SkippedTask:
      required:
      - name
      - reason
      type: object
      properties:
        name:
          type: string
          description: Name is the Pipeline Task name
          default: ""
        reason:
          type: string
          description: Reason is the cause of the PipelineTask being skipped.
          default: ""
        whenExpressions:
          type: array
          description: WhenExpressions is the list of checks guarding the execution
            of the PipelineTask
          items:
            $ref: '#/components/schemas/v1.WhenExpression'
          x-kubernetes-list-type: atomic
      description: SkippedTask is used to describe the Tasks that were skipped due
        to their When Expressions evaluating to False. This is a struct because we
        are looking into including more details about the When Expressions that caused
        this Task to be skipped.
    v1.Step:
      required:
      - name
      type: object
      properties:
        args:
          type: array
          description: 'Arguments to the entrypoint. The image''s CMD is used if this
            is not provided. Variable references $(VAR_NAME) are expanded using the
            container''s environment. If a variable cannot be resolved, the reference
            in the input string will be unchanged. Double $$ are reduced to a single
            $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
            will produce the string literal "$(VAR_NAME)". Escaped references will
            never be expanded, regardless of whether the variable exists or not. Cannot
            be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        command:
          type: array
          description: 'Entrypoint array. Not executed within a shell. The image''s
            ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)
            are expanded using the container''s environment. If a variable cannot
            be resolved, the reference in the input string will be unchanged. Double
            $$ are reduced to a single $, which allows for escaping the $(VAR_NAME)
            syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
            Escaped references will never be expanded, regardless of whether the variable
            exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        computeResources:
          $ref: '#/components/schemas/v1.ResourceRequirements'
        env:
          type: array
          description: List of environment variables to set in the Step. Cannot be
            updated.
          items:
            $ref: '#/components/schemas/v1.EnvVar'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: name
        envFrom:
          type: array
          description: List of sources to populate environment variables in the Step.
            The keys defined within a source must be a C_IDENTIFIER. All invalid keys
            will be reported as an event when the Step is starting. When a key exists
            in multiple sources, the value associated with the last source will take
            precedence. Values defined by an Env with a duplicate key will take precedence.
            Cannot be updated.
          items:
            $ref: '#/components/schemas/v1.EnvFromSource'
          x-kubernetes-list-type: atomic
        image:
          type: string
          description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
        imagePullPolicy:
          type: string
          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults
            to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot
            be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
        name:
          type: string
          description: Name of the Step specified as a DNS_LABEL. Each Step in a Task
            must have a unique name.
          default: ""
        onError:
          type: string
          description: OnError defines the exiting behavior of a container on error
            can be set to [ continue | stopAndFail ]
        script:
          type: string
          description: |-
            Script is the contents of an executable file to execute.

            If Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.
        securityContext:
          $ref: '#/components/schemas/v1.SecurityContext'
        stderrConfig:
          $ref: '#/components/schemas/v1.StepOutputConfig'
        stdoutConfig:
          $ref: '#/components/schemas/v1.StepOutputConfig'
        timeout:
          $ref: '#/components/schemas/v1.Duration'
        volumeDevices:
          type: array
          description: volumeDevices is the list of block devices to be used by the
            Step.
          items:
            $ref: '#/components/schemas/v1.VolumeDevice'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: devicePath
        volumeMounts:
          type: array
          description: Volumes to mount into the Step's filesystem. Cannot be updated.
          items:
            $ref: '#/components/schemas/v1.VolumeMount'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: mountPath
        workingDir:
          type: string
          description: Step's working directory. If not specified, the container runtime's
            default will be used, which might be configured in the container image.
            Cannot be updated.
        workspaces:
          type: array
          description: |-
            This is an alpha field. You must set the "enable-api-fields" feature flag to "alpha" for this field to be supported.

            Workspaces is a list of workspaces from the Task that this Step wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.
          items:
            $ref: '#/components/schemas/v1.WorkspaceUsage'
          x-kubernetes-list-type: atomic
      description: Step runs a subcomponent of a Task
    v1.StepOutputConfig:
      type: object
      properties:
        path:
          type: string
          description: Path to duplicate stdout stream to on container's local filesystem.
      description: StepOutputConfig stores configuration for a step output stream.
    v1.StepState:
      type: object
      properties:
        container:
          type: string
        imageID:
          type: string
        name:
          type: string
        running:
          $ref: '#/components/schemas/v1.ContainerStateRunning'
        terminated:
          $ref: '#/components/schemas/v1.ContainerStateTerminated'
        waiting:
          $ref: '#/components/schemas/v1.ContainerStateWaiting'
      description: StepState reports the results of running a step in a Task.
    v1.StepTemplate:
      type: object
      properties:
        args:
          type: array
          description: 'Arguments to the entrypoint. The image''s CMD is used if this
            is not provided. Variable references $(VAR_NAME) are expanded using the
            Step''s environment. If a variable cannot be resolved, the reference in
            the input string will be unchanged. Double $$ are reduced to a single
            $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
            will produce the string literal "$(VAR_NAME)". Escaped references will
            never be expanded, regardless of whether the variable exists or not. Cannot
            be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        command:
          type: array
          description: 'Entrypoint array. Not executed within a shell. The image''s
            ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)
            are expanded using the Step''s environment. If a variable cannot be resolved,
            the reference in the input string will be unchanged. Double $$ are reduced
            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
            "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped
            references will never be expanded, regardless of whether the variable
            exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        computeResources:
          $ref: '#/components/schemas/v1.ResourceRequirements'
        env:
          type: array
          description: List of environment variables to set in the Step. Cannot be
            updated.
          items:
            $ref: '#/components/schemas/v1.EnvVar'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: name
        envFrom:
          type: array
          description: List of sources to populate environment variables in the Step.
            The keys defined within a source must be a C_IDENTIFIER. All invalid keys
            will be reported as an event when the Step is starting. When a key exists
            in multiple sources, the value associated with the last source will take
            precedence. Values defined by an Env with a duplicate key will take precedence.
            Cannot be updated.
          items:
            $ref: '#/components/schemas/v1.EnvFromSource'
          x-kubernetes-list-type: atomic
        image:
          type: string
          description: 'Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images
            This field is optional to allow higher level config management to default
            or override container images in workload controllers like Deployments
            and StatefulSets.'
        imagePullPolicy:
          type: string
          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults
            to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot
            be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
        securityContext:
          $ref: '#/components/schemas/v1.SecurityContext'
        volumeDevices:
          type: array
          description: volumeDevices is the list of block devices to be used by the
            Step.
          items:
            $ref: '#/components/schemas/v1.VolumeDevice'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: devicePath
        volumeMounts:
          type: array
          description: Volumes to mount into the Step's filesystem. Cannot be updated.
          items:
            $ref: '#/components/schemas/v1.VolumeMount'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: atomic
          x-kubernetes-patch-merge-key: mountPath
        workingDir:
          type: string
          description: Step's working directory. If not specified, the container runtime's
            default will be used, which might be configured in the container image.
            Cannot be updated.
      description: StepTemplate is a template for a Step
    v1.Task:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.TaskSpec'
      description: Task represents a collection of sequential steps that are run as
        part of a Pipeline using a set of inputs and producing a set of outputs. Tasks
        execute when TaskRuns are created that provide the input parameters and resources
        and output resources the Task requires.
    v1.TaskList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.Task'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/v1.ListMeta'
      description: TaskList contains a list of Task
    v1.TaskRef:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'API version of the referent Note: A Task with non-empty APIVersion
            and Kind is considered a Custom Task'
        kind:
          type: string
          description: 'TaskKind indicates the Kind of the Task: 1. Namespaced Task
            when Kind is set to "Task". If Kind is "", it defaults to "Task". 2. Custom
            Task when Kind is non-empty and APIVersion is non-empty'
        name:
          type: string
          description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names'
      description: TaskRef can be used to refer to a specific instance of a task.
    v1.TaskResult:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: Description is a human-readable description of the result
        name:
          type: string
          description: Name the given name
          default: ""
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1.PropertySpec'
          description: Properties is the JSON Schema properties to support key-value
            pairs results.
        type:
          type: string
          description: Type is the user-specified type of the result. The possible
            type is currently "string" and will support "array" in following work.
      description: TaskResult used to describe the results of a task
    v1.TaskRun:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.TaskRunSpec'
        status:
          $ref: '#/components/schemas/v1.TaskRunStatus'
      description: TaskRun represents a single execution of a Task. TaskRuns are how
        the steps specified in a Task are executed; they specify the parameters and
        resources used to run the steps in a Task.
    v1.TaskRunDebug:
      type: object
      properties:
        breakpoint:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
      description: TaskRunDebug defines the breakpoint config for a particular TaskRun
    v1.TaskRunInputs:
      type: object
      properties:
        params:
          type: array
          items:
            $ref: '#/components/schemas/v1.Param'
          x-kubernetes-list-type: atomic
      description: TaskRunInputs holds the input values that this task was invoked
        with.
    v1.TaskRunList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.TaskRun'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/v1.ListMeta'
      description: TaskRunList contains a list of TaskRun
    v1.TaskRunResult:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: Name the given name
          default: ""
        type:
          type: string
          description: Type is the user-specified type of the result. The possible
            type is currently "string" and will support "array" in following work.
        value:
          $ref: '#/components/schemas/v1.ParamValue'
      description: TaskRunResult used to describe the results of a task
    v1.TaskRunSidecarSpec:
      required:
      - computeResources
      - name
      type: object
      properties:
        computeResources:
          $ref: '#/components/schemas/v1.ResourceRequirements'
        name:
          type: string
          description: The name of the Sidecar to override.
          default: ""
      description: TaskRunSidecarSpec is used to override the values of a Sidecar
        in the corresponding Task.
    v1.TaskRunSpec:
      type: object
      properties:
        computeResources:
          $ref: '#/components/schemas/v1.ResourceRequirements'
        debug:
          $ref: '#/components/schemas/v1.TaskRunDebug'
        params:
          type: array
          items:
            $ref: '#/components/schemas/v1.Param'
          x-kubernetes-list-type: atomic
        podTemplate:
          $ref: '#/components/schemas/pod.Template'
        retries:
          type: integer
          description: Retries represents how many times this TaskRun should be retried
            in the event of task failure.
          format: int32
        serviceAccountName:
          type: string
          default: ""
        sidecarSpecs:
          type: array
          description: Specs to apply to Sidecars in this TaskRun. If a field is specified
            in both a Sidecar and a SidecarSpec, the value from the SidecarSpec will
            be used. This field is only supported when the alpha feature gate is enabled.
          items:
            $ref: '#/components/schemas/v1.TaskRunSidecarSpec'
          x-kubernetes-list-type: atomic
        status:
          type: string
          description: Used for cancelling a TaskRun (and maybe more later on)
        statusMessage:
          type: string
          description: Status message for cancellation.
        stepSpecs:
          type: array
          description: Specs to apply to Steps in this TaskRun. If a field is specified
            in both a Step and a StepSpec, the value from the StepSpec will be used.
            This field is only supported when the alpha feature gate is enabled.
          items:
            $ref: '#/components/schemas/v1.TaskRunStepSpec'
          x-kubernetes-list-type: atomic
        taskRef:
          $ref: '#/components/schemas/v1.TaskRef'
        taskSpec:
          $ref: '#/components/schemas/v1.TaskSpec'
        timeout:
          $ref: '#/components/schemas/v1.Duration'
        workspaces:
          type: array
          description: Workspaces is a list of WorkspaceBindings from volumes to workspaces.
          items:
            $ref: '#/components/schemas/v1.WorkspaceBinding'
          x-kubernetes-list-type: atomic
      description: TaskRunSpec defines the desired state of TaskRun
    v1.TaskRunStatus:
      required:
      - podName
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: Annotations is additional Status fields for the Resource to
            save some additional State as well as convey more information to the user.
            This is roughly akin to Annotations on any k8s resource, just the reconciler
            conveying richer information outwards.
        completionTime:
          $ref: '#/components/schemas/v1.Time'
        conditions:
          type: array
          description: Conditions the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/knative.Condition'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
        observedGeneration:
          type: integer
          description: ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
          format: int64
        podName:
          type: string
          description: PodName is the name of the pod responsible for executing this
            task's steps.
          default: ""
        provenance:
          $ref: '#/components/schemas/v1.Provenance'
        results:
          type: array
          description: Results are the list of results written out by the task's containers
          items:
            $ref: '#/components/schemas/v1.TaskRunResult'
          x-kubernetes-list-type: atomic
        retriesStatus:
          type: array
          description: RetriesStatus contains the history of TaskRunStatus in case
            of a retry in order to keep record of failures. All TaskRunStatus stored
            in RetriesStatus will have no date within the RetriesStatus as is redundant.
          items:
            $ref: '#/components/schemas/v1.TaskRunStatus'
          x-kubernetes-list-type: atomic
        sidecars:
          type: array
          description: The list has one entry per sidecar in the manifest. Each entry
            is represents the imageid of the corresponding sidecar.
          items:
            $ref: '#/components/schemas/v1.SidecarState'
          x-kubernetes-list-type: atomic
        spanContext:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: SpanContext contains tracing span context fields
        startTime:
          $ref: '#/components/schemas/v1.Time'
        steps:
          type: array
          description: Steps describes the state of each build step container.
          items:
            $ref: '#/components/schemas/v1.StepState'
          x-kubernetes-list-type: atomic
        taskSpec:
          $ref: '#/components/schemas/v1.TaskSpec'
      description: TaskRunStatus defines the observed state of TaskRun
    v1.TaskRunStatusFields:
      required:
      - podName
      type: object
      properties:
        completionTime:
          $ref: '#/components/schemas/v1.Time'
        podName:
          type: string
          description: PodName is the name of the pod responsible for executing this
            task's steps.
          default: ""
        provenance:
          $ref: '#/components/schemas/v1.Provenance'
        results:
          type: array
          description: Results are the list of results written out by the task's containers
          items:
            $ref: '#/components/schemas/v1.TaskRunResult'
          x-kubernetes-list-type: atomic
        retriesStatus:
          type: array
          description: RetriesStatus contains the history of TaskRunStatus in case
            of a retry in order to keep record of failures. All TaskRunStatus stored
            in RetriesStatus will have no date within the RetriesStatus as is redundant.
          items:
            $ref: '#/components/schemas/v1.TaskRunStatus'
          x-kubernetes-list-type: atomic
        sidecars:
          type: array
          description: The list has one entry per sidecar in the manifest. Each entry
            is represents the imageid of the corresponding sidecar.
          items:
            $ref: '#/components/schemas/v1.SidecarState'
          x-kubernetes-list-type: atomic
        spanContext:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: SpanContext contains tracing span context fields
        startTime:
          $ref: '#/components/schemas/v1.Time'
        steps:
          type: array
          description: Steps describes the state of each build step container.
          items:
            $ref: '#/components/schemas/v1.StepState'
          x-kubernetes-list-type: atomic
        taskSpec:
          $ref: '#/components/schemas/v1.TaskSpec'
      description: TaskRunStatusFields holds the fields of TaskRun's status.  This
        is defined separately and inlined so that other types can readily consume
        these fields via duck typing.
    v1.TaskRunStepSpec:
      required:
      - computeResources
      - name
      type: object
      properties:
        computeResources:
          $ref: '#/components/schemas/v1.ResourceRequirements'
        name:
          type: string
          description: The name of the Step to override.
          default: ""
      description: TaskRunStepSpec is used to override the values of a Step in the
        corresponding Task.
    v1.TaskSpec:
      type: object
      properties:
        description:
          type: string
          description: Description is a user-facing description of the task that may
            be used to populate a UI.
        displayName:
          type: string
          description: DisplayName is a user-facing name of the task that may be used
            to populate a UI.
        params:
          type: array
          description: Params is a list of input parameters required to run the task.
            Params must be supplied as inputs in TaskRuns unless they declare a default
            value.
          items:
            $ref: '#/components/schemas/v1.ParamSpec'
          x-kubernetes-list-type: atomic
        results:
          type: array
          description: Results are values that this Task can output
          items:
            $ref: '#/components/schemas/v1.TaskResult'
          x-kubernetes-list-type: atomic
        sidecars:
          type: array
          description: Sidecars are run alongside the Task's step containers. They
            begin before the steps start and end after the steps complete.
          items:
            $ref: '#/components/schemas/v1.Sidecar'
          x-kubernetes-list-type: atomic
        stepTemplate:
          $ref: '#/components/schemas/v1.StepTemplate'
        steps:
          type: array
          description: Steps are the steps of the build; each step is run sequentially
            with the source mounted into /workspace.
          items:
            $ref: '#/components/schemas/v1.Step'
          x-kubernetes-list-type: atomic
        volumes:
          type: array
          description: Volumes is a collection of volumes that are available to mount
            into the steps of the build.
          items:
            $ref: '#/components/schemas/v1.Volume'
          x-kubernetes-list-type: atomic
        workspaces:
          type: array
          description: Workspaces are the volumes that this Task requires.
          items:
            $ref: '#/components/schemas/v1.WorkspaceDeclaration'
          x-kubernetes-list-type: atomic
      description: TaskSpec defines the desired state of Task.
    v1.TimeoutFields:
      type: object
      properties:
        finally:
          $ref: '#/components/schemas/v1.Duration'
        pipeline:
          $ref: '#/components/schemas/v1.Duration'
        tasks:
          $ref: '#/components/schemas/v1.Duration'
      description: TimeoutFields allows granular specification of pipeline, task,
        and finally timeouts
    v1.WhenExpression:
      required:
      - input
      - operator
      - values
      type: object
      properties:
        input:
          type: string
          description: Input is the string for guard checking which can be a static
            input or an output from a parent Task
          default: ""
        operator:
          type: string
          description: Operator that represents an Input's relationship to the values
          default: ""
        values:
          type: array
          description: Values is an array of strings, which is compared against the
            input, for guard checking It must be non-empty
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
      description: WhenExpression allows a PipelineTask to declare expressions to
        be evaluated before the Task is run to determine whether the Task should be
        executed or skipped
    v1.WorkspaceBinding:
      required:
      - name
      type: object
      properties:
        configMap:
          $ref: '#/components/schemas/v1.ConfigMapVolumeSource'
        csi:
          $ref: '#/components/schemas/v1.CSIVolumeSource'
        emptyDir:
          $ref: '#/components/schemas/v1.EmptyDirVolumeSource'
        name:
          type: string
          description: Name is the name of the workspace populated by the volume.
          default: ""
        persistentVolumeClaim:
          $ref: '#/components/schemas/v1.PersistentVolumeClaimVolumeSource'
        projected:
          $ref: '#/components/schemas/v1.ProjectedVolumeSource'
        secret:
          $ref: '#/components/schemas/v1.SecretVolumeSource'
        subPath:
          type: string
          description: SubPath is optionally a directory on the volume which should
            be used for this binding (i.e. the volume will be mounted at this sub
            directory).
        volumeClaimTemplate:
          $ref: '#/components/schemas/v1.PersistentVolumeClaim'
      description: WorkspaceBinding maps a Task's declared workspace to a Volume.
    v1.WorkspaceDeclaration:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: Description is an optional human readable description of this
            volume.
        mountPath:
          type: string
          description: MountPath overrides the directory that the volume will be made
            available at.
        name:
          type: string
          description: Name is the name by which you can bind the volume at runtime.
          default: ""
        optional:
          type: boolean
          description: Optional marks a Workspace as not being required in TaskRuns.
            By default this field is false and so declared workspaces are required.
        readOnly:
          type: boolean
          description: ReadOnly dictates whether a mounted volume is writable. By
            default this field is false and so mounted volumes are writable.
      description: WorkspaceDeclaration is a declaration of a volume that a Task requires.
    v1.WorkspacePipelineTaskBinding:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the workspace as declared by the task
          default: ""
        subPath:
          type: string
          description: SubPath is optionally a directory on the volume which should
            be used for this binding (i.e. the volume will be mounted at this sub
            directory).
        workspace:
          type: string
          description: Workspace is the name of the workspace declared by the pipeline
      description: WorkspacePipelineTaskBinding describes how a workspace passed into
        the pipeline should be mapped to a task's declared workspace.
    v1.WorkspaceUsage:
      required:
      - mountPath
      - name
      type: object
      properties:
        mountPath:
          type: string
          description: MountPath is the path that the workspace should be mounted
            to inside the Step or Sidecar, overriding any MountPath specified in the
            Task's WorkspaceDeclaration.
          default: ""
        name:
          type: string
          description: Name is the name of the workspace this Step or Sidecar wants
            access to.
          default: ""
      description: WorkspaceUsage is used by a Step or Sidecar to declare that it
        wants isolated access to a Workspace defined in a Task.

# Copyright 2021 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Tekton

    Tekton Pipeline  # noqa: E501

    The version of the OpenAPI document: v0.49.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import tekton_pipeline
from tekton_pipeline.models.v1_pipeline import V1Pipeline  # noqa: E501
from tekton_pipeline.rest import ApiException

class TestV1Pipeline(unittest.TestCase):
    """V1Pipeline unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1Pipeline
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = tekton_pipeline.models.v1_pipeline.V1Pipeline()  # noqa: E501
        if include_optional :
            return V1Pipeline(
                api_version = '0', 
                kind = '0', 
                metadata = None, 
                spec = tekton_pipeline.models.v1/pipeline_spec.v1.PipelineSpec(
                    description = '0', 
                    display_name = '0', 
                    finally = [
                        tekton_pipeline.models.v1/pipeline_task.v1.PipelineTask(
                            description = '0', 
                            display_name = '0', 
                            matrix = tekton_pipeline.models.v1/matrix.v1.Matrix(
                                include = [
                                    tekton_pipeline.models.v1/include_params.v1.IncludeParams(
                                        name = '0', 
                                        params = [
                                            tekton_pipeline.models.v1/param.v1.Param(
                                                name = '0', 
                                                value = tekton_pipeline.models.v1/param_value.v1.ParamValue(
                                                    array_val = [
                                                        '0'
                                                        ], 
                                                    object_val = {
                                                        'key' : '0'
                                                        }, 
                                                    string_val = '0', 
                                                    type = '0', ), )
                                            ], )
                                    ], 
                                params = [
                                    tekton_pipeline.models.v1/param.v1.Param(
                                        name = '0', 
                                        value = tekton_pipeline.models.v1/param_value.v1.ParamValue(
                                            array_val = [
                                                '0'
                                                ], 
                                            object_val = {
                                                'key' : '0'
                                                }, 
                                            string_val = '0', 
                                            type = '0', ), )
                                    ], ), 
                            name = '0', 
                            params = [
                                tekton_pipeline.models.v1/param.v1.Param(
                                    name = '0', 
                                    value = tekton_pipeline.models.v1/param_value.v1.ParamValue(
                                        array_val = [
                                            '0'
                                            ], 
                                        object_val = {
                                            'key' : '0'
                                            }, 
                                        string_val = '0', 
                                        type = '0', ), )
                                ], 
                            retries = 56, 
                            run_after = [
                                '0'
                                ], 
                            task_ref = tekton_pipeline.models.v1/task_ref.v1.TaskRef(
                                api_version = '0', 
                                kind = '0', 
                                name = '0', ), 
                            task_spec = tekton_pipeline.models.v1/embedded_task.v1.EmbeddedTask(
                                api_version = '0', 
                                description = '0', 
                                display_name = '0', 
                                kind = '0', 
                                metadata = tekton_pipeline.models.v1/pipeline_task_metadata.v1.PipelineTaskMetadata(
                                    annotations = {
                                        'key' : '0'
                                        }, 
                                    labels = {
                                        'key' : '0'
                                        }, ), 
                                results = [
                                    tekton_pipeline.models.v1/task_result.v1.TaskResult(
                                        description = '0', 
                                        name = '0', 
                                        properties = {
                                            'key' : tekton_pipeline.models.v1/property_spec.v1.PropertySpec(
                                                type = '0', )
                                            }, 
                                        type = '0', )
                                    ], 
                                sidecars = [
                                    tekton_pipeline.models.v1/sidecar.v1.Sidecar(
                                        args = [
                                            '0'
                                            ], 
                                        command = [
                                            '0'
                                            ], 
                                        compute_resources = None, 
                                        env = [
                                            None
                                            ], 
                                        env_from = [
                                            None
                                            ], 
                                        image = '0', 
                                        image_pull_policy = '0', 
                                        lifecycle = None, 
                                        liveness_probe = None, 
                                        name = '0', 
                                        ports = [
                                            None
                                            ], 
                                        readiness_probe = None, 
                                        script = '0', 
                                        security_context = None, 
                                        startup_probe = None, 
                                        stdin = True, 
                                        stdin_once = True, 
                                        termination_message_path = '0', 
                                        termination_message_policy = '0', 
                                        tty = True, 
                                        volume_devices = [
                                            None
                                            ], 
                                        volume_mounts = [
                                            None
                                            ], 
                                        working_dir = '0', 
                                        workspaces = [
                                            tekton_pipeline.models.v1/workspace_usage.v1.WorkspaceUsage(
                                                mount_path = '0', 
                                                name = '0', )
                                            ], )
                                    ], 
                                spec = None, 
                                step_template = tekton_pipeline.models.v1/step_template.v1.StepTemplate(
                                    compute_resources = None, 
                                    image = '0', 
                                    image_pull_policy = '0', 
                                    security_context = None, 
                                    working_dir = '0', ), 
                                steps = [
                                    tekton_pipeline.models.v1/step.v1.Step(
                                        compute_resources = None, 
                                        image = '0', 
                                        image_pull_policy = '0', 
                                        name = '0', 
                                        on_error = '0', 
                                        script = '0', 
                                        security_context = None, 
                                        stderr_config = tekton_pipeline.models.v1/step_output_config.v1.StepOutputConfig(
                                            path = '0', ), 
                                        stdout_config = tekton_pipeline.models.v1/step_output_config.v1.StepOutputConfig(
                                            path = '0', ), 
                                        timeout = None, 
                                        working_dir = '0', )
                                    ], 
                                volumes = [
                                    None
                                    ], 
                                workspaces = [
                                    tekton_pipeline.models.v1/workspace_declaration.v1.WorkspaceDeclaration(
                                        description = '0', 
                                        mount_path = '0', 
                                        name = '0', 
                                        optional = True, 
                                        read_only = True, )
                                    ], ), 
                            timeout = None, 
                            when = [
                                tekton_pipeline.models.v1/when_expression.v1.WhenExpression(
                                    input = '0', 
                                    operator = '0', 
                                    values = [
                                        '0'
                                        ], )
                                ], 
                            workspaces = [
                                tekton_pipeline.models.v1/workspace_pipeline_task_binding.v1.WorkspacePipelineTaskBinding(
                                    name = '0', 
                                    sub_path = '0', 
                                    workspace = '0', )
                                ], )
                        ], 
                    params = [
                        tekton_pipeline.models.v1/param_spec.v1.ParamSpec(
                            default = tekton_pipeline.models.v1/param_value.v1.ParamValue(
                                array_val = [
                                    '0'
                                    ], 
                                object_val = {
                                    'key' : '0'
                                    }, 
                                string_val = '0', 
                                type = '0', ), 
                            description = '0', 
                            name = '0', 
                            type = '0', )
                        ], 
                    results = [
                        tekton_pipeline.models.v1/pipeline_result.v1.PipelineResult(
                            description = '0', 
                            name = '0', 
                            type = '0', 
                            value = tekton_pipeline.models.v1/param_value.v1.ParamValue(
                                array_val = [
                                    '0'
                                    ], 
                                object_val = {
                                    'key' : '0'
                                    }, 
                                string_val = '0', 
                                type = '0', ), )
                        ], 
                    tasks = [
                        tekton_pipeline.models.v1/pipeline_task.v1.PipelineTask(
                            description = '0', 
                            display_name = '0', 
                            name = '0', 
                            retries = 56, 
                            timeout = None, )
                        ], 
                    workspaces = [
                        tekton_pipeline.models.v1/pipeline_workspace_declaration.v1.PipelineWorkspaceDeclaration(
                            description = '0', 
                            name = '0', 
                            optional = True, )
                        ], )
            )
        else :
            return V1Pipeline(
        )

    def testV1Pipeline(self):
        """Test V1Pipeline"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()

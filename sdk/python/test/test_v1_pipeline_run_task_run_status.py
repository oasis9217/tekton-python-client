# Copyright 2021 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Tekton

    Tekton Pipeline  # noqa: E501

    The version of the OpenAPI document: v0.17.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import tekton_pipeline
from tekton_pipeline.models.v1_pipeline_run_task_run_status import V1PipelineRunTaskRunStatus  # noqa: E501
from tekton_pipeline.rest import ApiException

class TestV1PipelineRunTaskRunStatus(unittest.TestCase):
    """V1PipelineRunTaskRunStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1PipelineRunTaskRunStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = tekton_pipeline.models.v1_pipeline_run_task_run_status.V1PipelineRunTaskRunStatus()  # noqa: E501
        if include_optional :
            return V1PipelineRunTaskRunStatus(
                pipeline_task_name = '0', 
                status = tekton_pipeline.models.v1/task_run_status.v1.TaskRunStatus(
                    annotations = {
                        'key' : '0'
                        }, 
                    completion_time = None, 
                    conditions = [
                        None
                        ], 
                    observed_generation = 56, 
                    pod_name = '0', 
                    provenance = tekton_pipeline.models.v1/provenance.v1.Provenance(
                        feature_flags = None, 
                        ref_source = tekton_pipeline.models.v1/ref_source.v1.RefSource(
                            digest = {
                                'key' : '0'
                                }, 
                            entry_point = '0', 
                            uri = '0', ), ), 
                    results = [
                        tekton_pipeline.models.v1/task_run_result.v1.TaskRunResult(
                            name = '0', 
                            type = '0', 
                            value = tekton_pipeline.models.v1/param_value.v1.ParamValue(
                                array_val = [
                                    '0'
                                    ], 
                                object_val = {
                                    'key' : '0'
                                    }, 
                                string_val = '0', 
                                type = '0', ), )
                        ], 
                    retries_status = [
                        tekton_pipeline.models.v1/task_run_status.v1.TaskRunStatus(
                            completion_time = None, 
                            observed_generation = 56, 
                            pod_name = '0', 
                            sidecars = [
                                tekton_pipeline.models.v1/sidecar_state.v1.SidecarState(
                                    container = '0', 
                                    image_id = '0', 
                                    name = '0', 
                                    running = None, 
                                    terminated = None, 
                                    waiting = None, )
                                ], 
                            span_context = {
                                'key' : '0'
                                }, 
                            start_time = None, 
                            steps = [
                                tekton_pipeline.models.v1/step_state.v1.StepState(
                                    container = '0', 
                                    image_id = '0', 
                                    name = '0', 
                                    running = None, 
                                    terminated = None, 
                                    waiting = None, )
                                ], 
                            task_spec = tekton_pipeline.models.v1/task_spec.v1.TaskSpec(
                                description = '0', 
                                display_name = '0', 
                                params = [
                                    tekton_pipeline.models.v1/param_spec.v1.ParamSpec(
                                        default = tekton_pipeline.models.v1/param_value.v1.ParamValue(
                                            array_val = [
                                                '0'
                                                ], 
                                            object_val = {
                                                'key' : '0'
                                                }, 
                                            string_val = '0', 
                                            type = '0', ), 
                                        description = '0', 
                                        name = '0', 
                                        properties = {
                                            'key' : tekton_pipeline.models.v1/property_spec.v1.PropertySpec(
                                                type = '0', )
                                            }, 
                                        type = '0', )
                                    ], 
                                step_template = tekton_pipeline.models.v1/step_template.v1.StepTemplate(
                                    args = [
                                        '0'
                                        ], 
                                    command = [
                                        '0'
                                        ], 
                                    compute_resources = None, 
                                    env = [
                                        None
                                        ], 
                                    env_from = [
                                        None
                                        ], 
                                    image = '0', 
                                    image_pull_policy = '0', 
                                    security_context = None, 
                                    volume_devices = [
                                        None
                                        ], 
                                    volume_mounts = [
                                        None
                                        ], 
                                    working_dir = '0', ), 
                                volumes = [
                                    None
                                    ], 
                                workspaces = [
                                    tekton_pipeline.models.v1/workspace_declaration.v1.WorkspaceDeclaration(
                                        description = '0', 
                                        mount_path = '0', 
                                        name = '0', 
                                        optional = True, 
                                        read_only = True, )
                                    ], ), )
                        ], 
                    sidecars = [
                        tekton_pipeline.models.v1/sidecar_state.v1.SidecarState(
                            container = '0', 
                            image_id = '0', 
                            name = '0', 
                            running = None, 
                            terminated = None, 
                            waiting = None, )
                        ], 
                    span_context = {
                        'key' : '0'
                        }, 
                    start_time = None, 
                    steps = [
                        tekton_pipeline.models.v1/step_state.v1.StepState(
                            container = '0', 
                            image_id = '0', 
                            name = '0', 
                            running = None, 
                            terminated = None, 
                            waiting = None, )
                        ], 
                    task_spec = tekton_pipeline.models.v1/task_spec.v1.TaskSpec(
                        description = '0', 
                        display_name = '0', ), ), 
                when_expressions = [
                    tekton_pipeline.models.v1/when_expression.v1.WhenExpression(
                        input = '0', 
                        operator = '0', 
                        values = [
                            '0'
                            ], )
                    ]
            )
        else :
            return V1PipelineRunTaskRunStatus(
        )

    def testV1PipelineRunTaskRunStatus(self):
        """Test V1PipelineRunTaskRunStatus"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()

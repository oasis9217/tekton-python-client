# Copyright 2021 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Tekton

    Tekton Pipeline  # noqa: E501

    The version of the OpenAPI document: v0.17.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tekton_pipeline.configuration import Configuration


class V1PipelineRunStatusFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'child_references': 'list[V1ChildStatusReference]',
        'completion_time': 'V1Time',
        'finally_start_time': 'V1Time',
        'pipeline_spec': 'V1PipelineSpec',
        'provenance': 'V1Provenance',
        'results': 'list[V1PipelineRunResult]',
        'skipped_tasks': 'list[V1SkippedTask]',
        'span_context': 'dict(str, str)',
        'start_time': 'V1Time'
    }

    attribute_map = {
        'child_references': 'childReferences',
        'completion_time': 'completionTime',
        'finally_start_time': 'finallyStartTime',
        'pipeline_spec': 'pipelineSpec',
        'provenance': 'provenance',
        'results': 'results',
        'skipped_tasks': 'skippedTasks',
        'span_context': 'spanContext',
        'start_time': 'startTime'
    }

    def __init__(self, child_references=None, completion_time=None, finally_start_time=None, pipeline_spec=None, provenance=None, results=None, skipped_tasks=None, span_context=None, start_time=None, local_vars_configuration=None):  # noqa: E501
        """V1PipelineRunStatusFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._child_references = None
        self._completion_time = None
        self._finally_start_time = None
        self._pipeline_spec = None
        self._provenance = None
        self._results = None
        self._skipped_tasks = None
        self._span_context = None
        self._start_time = None
        self.discriminator = None

        if child_references is not None:
            self.child_references = child_references
        if completion_time is not None:
            self.completion_time = completion_time
        if finally_start_time is not None:
            self.finally_start_time = finally_start_time
        if pipeline_spec is not None:
            self.pipeline_spec = pipeline_spec
        if provenance is not None:
            self.provenance = provenance
        if results is not None:
            self.results = results
        if skipped_tasks is not None:
            self.skipped_tasks = skipped_tasks
        if span_context is not None:
            self.span_context = span_context
        if start_time is not None:
            self.start_time = start_time

    @property
    def child_references(self):
        """Gets the child_references of this V1PipelineRunStatusFields.  # noqa: E501

        list of TaskRun and Run names, PipelineTask names, and API versions/kinds for children of this PipelineRun.  # noqa: E501

        :return: The child_references of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: list[V1ChildStatusReference]
        """
        return self._child_references

    @child_references.setter
    def child_references(self, child_references):
        """Sets the child_references of this V1PipelineRunStatusFields.

        list of TaskRun and Run names, PipelineTask names, and API versions/kinds for children of this PipelineRun.  # noqa: E501

        :param child_references: The child_references of this V1PipelineRunStatusFields.  # noqa: E501
        :type: list[V1ChildStatusReference]
        """

        self._child_references = child_references

    @property
    def completion_time(self):
        """Gets the completion_time of this V1PipelineRunStatusFields.  # noqa: E501


        :return: The completion_time of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: V1Time
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this V1PipelineRunStatusFields.


        :param completion_time: The completion_time of this V1PipelineRunStatusFields.  # noqa: E501
        :type: V1Time
        """

        self._completion_time = completion_time

    @property
    def finally_start_time(self):
        """Gets the finally_start_time of this V1PipelineRunStatusFields.  # noqa: E501


        :return: The finally_start_time of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: V1Time
        """
        return self._finally_start_time

    @finally_start_time.setter
    def finally_start_time(self, finally_start_time):
        """Sets the finally_start_time of this V1PipelineRunStatusFields.


        :param finally_start_time: The finally_start_time of this V1PipelineRunStatusFields.  # noqa: E501
        :type: V1Time
        """

        self._finally_start_time = finally_start_time

    @property
    def pipeline_spec(self):
        """Gets the pipeline_spec of this V1PipelineRunStatusFields.  # noqa: E501


        :return: The pipeline_spec of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: V1PipelineSpec
        """
        return self._pipeline_spec

    @pipeline_spec.setter
    def pipeline_spec(self, pipeline_spec):
        """Sets the pipeline_spec of this V1PipelineRunStatusFields.


        :param pipeline_spec: The pipeline_spec of this V1PipelineRunStatusFields.  # noqa: E501
        :type: V1PipelineSpec
        """

        self._pipeline_spec = pipeline_spec

    @property
    def provenance(self):
        """Gets the provenance of this V1PipelineRunStatusFields.  # noqa: E501


        :return: The provenance of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: V1Provenance
        """
        return self._provenance

    @provenance.setter
    def provenance(self, provenance):
        """Sets the provenance of this V1PipelineRunStatusFields.


        :param provenance: The provenance of this V1PipelineRunStatusFields.  # noqa: E501
        :type: V1Provenance
        """

        self._provenance = provenance

    @property
    def results(self):
        """Gets the results of this V1PipelineRunStatusFields.  # noqa: E501

        Results are the list of results written out by the pipeline task's containers  # noqa: E501

        :return: The results of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: list[V1PipelineRunResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this V1PipelineRunStatusFields.

        Results are the list of results written out by the pipeline task's containers  # noqa: E501

        :param results: The results of this V1PipelineRunStatusFields.  # noqa: E501
        :type: list[V1PipelineRunResult]
        """

        self._results = results

    @property
    def skipped_tasks(self):
        """Gets the skipped_tasks of this V1PipelineRunStatusFields.  # noqa: E501

        list of tasks that were skipped due to when expressions evaluating to false  # noqa: E501

        :return: The skipped_tasks of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: list[V1SkippedTask]
        """
        return self._skipped_tasks

    @skipped_tasks.setter
    def skipped_tasks(self, skipped_tasks):
        """Sets the skipped_tasks of this V1PipelineRunStatusFields.

        list of tasks that were skipped due to when expressions evaluating to false  # noqa: E501

        :param skipped_tasks: The skipped_tasks of this V1PipelineRunStatusFields.  # noqa: E501
        :type: list[V1SkippedTask]
        """

        self._skipped_tasks = skipped_tasks

    @property
    def span_context(self):
        """Gets the span_context of this V1PipelineRunStatusFields.  # noqa: E501

        SpanContext contains tracing span context fields  # noqa: E501

        :return: The span_context of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._span_context

    @span_context.setter
    def span_context(self, span_context):
        """Sets the span_context of this V1PipelineRunStatusFields.

        SpanContext contains tracing span context fields  # noqa: E501

        :param span_context: The span_context of this V1PipelineRunStatusFields.  # noqa: E501
        :type: dict(str, str)
        """

        self._span_context = span_context

    @property
    def start_time(self):
        """Gets the start_time of this V1PipelineRunStatusFields.  # noqa: E501


        :return: The start_time of this V1PipelineRunStatusFields.  # noqa: E501
        :rtype: V1Time
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1PipelineRunStatusFields.


        :param start_time: The start_time of this V1PipelineRunStatusFields.  # noqa: E501
        :type: V1Time
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PipelineRunStatusFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1PipelineRunStatusFields):
            return True

        return self.to_dict() != other.to_dict()

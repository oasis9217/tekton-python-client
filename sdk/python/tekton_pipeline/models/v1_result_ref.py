# Copyright 2021 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Tekton

    Tekton Pipeline  # noqa: E501

    The version of the OpenAPI document: v0.17.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tekton_pipeline.configuration import Configuration


class V1ResultRef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pipeline_task': 'str',
        '_property': 'str',
        'result': 'str',
        'results_index': 'int'
    }

    attribute_map = {
        'pipeline_task': 'pipelineTask',
        '_property': 'property',
        'result': 'result',
        'results_index': 'resultsIndex'
    }

    def __init__(self, pipeline_task='', _property='', result='', results_index=0, local_vars_configuration=None):  # noqa: E501
        """V1ResultRef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pipeline_task = None
        self.__property = None
        self._result = None
        self._results_index = None
        self.discriminator = None

        self.pipeline_task = pipeline_task
        self._property = _property
        self.result = result
        self.results_index = results_index

    @property
    def pipeline_task(self):
        """Gets the pipeline_task of this V1ResultRef.  # noqa: E501


        :return: The pipeline_task of this V1ResultRef.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_task

    @pipeline_task.setter
    def pipeline_task(self, pipeline_task):
        """Sets the pipeline_task of this V1ResultRef.


        :param pipeline_task: The pipeline_task of this V1ResultRef.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_task is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_task`, must not be `None`")  # noqa: E501

        self._pipeline_task = pipeline_task

    @property
    def _property(self):
        """Gets the _property of this V1ResultRef.  # noqa: E501


        :return: The _property of this V1ResultRef.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this V1ResultRef.


        :param _property: The _property of this V1ResultRef.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and _property is None:  # noqa: E501
            raise ValueError("Invalid value for `_property`, must not be `None`")  # noqa: E501

        self.__property = _property

    @property
    def result(self):
        """Gets the result of this V1ResultRef.  # noqa: E501


        :return: The result of this V1ResultRef.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this V1ResultRef.


        :param result: The result of this V1ResultRef.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and result is None:  # noqa: E501
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def results_index(self):
        """Gets the results_index of this V1ResultRef.  # noqa: E501


        :return: The results_index of this V1ResultRef.  # noqa: E501
        :rtype: int
        """
        return self._results_index

    @results_index.setter
    def results_index(self, results_index):
        """Sets the results_index of this V1ResultRef.


        :param results_index: The results_index of this V1ResultRef.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and results_index is None:  # noqa: E501
            raise ValueError("Invalid value for `results_index`, must not be `None`")  # noqa: E501

        self._results_index = results_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ResultRef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ResultRef):
            return True

        return self.to_dict() != other.to_dict()

# Copyright 2021 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Tekton

    Tekton Pipeline  # noqa: E501

    The version of the OpenAPI document: v0.17.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tekton_pipeline.configuration import Configuration


class V1PipelineRunSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'params': 'list[V1Param]',
        'pipeline_ref': 'V1PipelineRef',
        'pipeline_spec': 'V1PipelineSpec',
        'status': 'str',
        'task_run_specs': 'list[V1PipelineTaskRunSpec]',
        'task_run_template': 'V1PipelineTaskRunTemplate',
        'timeouts': 'V1TimeoutFields',
        'workspaces': 'list[V1WorkspaceBinding]'
    }

    attribute_map = {
        'params': 'params',
        'pipeline_ref': 'pipelineRef',
        'pipeline_spec': 'pipelineSpec',
        'status': 'status',
        'task_run_specs': 'taskRunSpecs',
        'task_run_template': 'taskRunTemplate',
        'timeouts': 'timeouts',
        'workspaces': 'workspaces'
    }

    def __init__(self, params=None, pipeline_ref=None, pipeline_spec=None, status=None, task_run_specs=None, task_run_template=None, timeouts=None, workspaces=None, local_vars_configuration=None):  # noqa: E501
        """V1PipelineRunSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._params = None
        self._pipeline_ref = None
        self._pipeline_spec = None
        self._status = None
        self._task_run_specs = None
        self._task_run_template = None
        self._timeouts = None
        self._workspaces = None
        self.discriminator = None

        if params is not None:
            self.params = params
        if pipeline_ref is not None:
            self.pipeline_ref = pipeline_ref
        if pipeline_spec is not None:
            self.pipeline_spec = pipeline_spec
        if status is not None:
            self.status = status
        if task_run_specs is not None:
            self.task_run_specs = task_run_specs
        if task_run_template is not None:
            self.task_run_template = task_run_template
        if timeouts is not None:
            self.timeouts = timeouts
        if workspaces is not None:
            self.workspaces = workspaces

    @property
    def params(self):
        """Gets the params of this V1PipelineRunSpec.  # noqa: E501

        Params is a list of parameter names and values.  # noqa: E501

        :return: The params of this V1PipelineRunSpec.  # noqa: E501
        :rtype: list[V1Param]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this V1PipelineRunSpec.

        Params is a list of parameter names and values.  # noqa: E501

        :param params: The params of this V1PipelineRunSpec.  # noqa: E501
        :type: list[V1Param]
        """

        self._params = params

    @property
    def pipeline_ref(self):
        """Gets the pipeline_ref of this V1PipelineRunSpec.  # noqa: E501


        :return: The pipeline_ref of this V1PipelineRunSpec.  # noqa: E501
        :rtype: V1PipelineRef
        """
        return self._pipeline_ref

    @pipeline_ref.setter
    def pipeline_ref(self, pipeline_ref):
        """Sets the pipeline_ref of this V1PipelineRunSpec.


        :param pipeline_ref: The pipeline_ref of this V1PipelineRunSpec.  # noqa: E501
        :type: V1PipelineRef
        """

        self._pipeline_ref = pipeline_ref

    @property
    def pipeline_spec(self):
        """Gets the pipeline_spec of this V1PipelineRunSpec.  # noqa: E501


        :return: The pipeline_spec of this V1PipelineRunSpec.  # noqa: E501
        :rtype: V1PipelineSpec
        """
        return self._pipeline_spec

    @pipeline_spec.setter
    def pipeline_spec(self, pipeline_spec):
        """Sets the pipeline_spec of this V1PipelineRunSpec.


        :param pipeline_spec: The pipeline_spec of this V1PipelineRunSpec.  # noqa: E501
        :type: V1PipelineSpec
        """

        self._pipeline_spec = pipeline_spec

    @property
    def status(self):
        """Gets the status of this V1PipelineRunSpec.  # noqa: E501

        Used for cancelling a pipelinerun (and maybe more later on)  # noqa: E501

        :return: The status of this V1PipelineRunSpec.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1PipelineRunSpec.

        Used for cancelling a pipelinerun (and maybe more later on)  # noqa: E501

        :param status: The status of this V1PipelineRunSpec.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def task_run_specs(self):
        """Gets the task_run_specs of this V1PipelineRunSpec.  # noqa: E501

        TaskRunSpecs holds a set of runtime specs  # noqa: E501

        :return: The task_run_specs of this V1PipelineRunSpec.  # noqa: E501
        :rtype: list[V1PipelineTaskRunSpec]
        """
        return self._task_run_specs

    @task_run_specs.setter
    def task_run_specs(self, task_run_specs):
        """Sets the task_run_specs of this V1PipelineRunSpec.

        TaskRunSpecs holds a set of runtime specs  # noqa: E501

        :param task_run_specs: The task_run_specs of this V1PipelineRunSpec.  # noqa: E501
        :type: list[V1PipelineTaskRunSpec]
        """

        self._task_run_specs = task_run_specs

    @property
    def task_run_template(self):
        """Gets the task_run_template of this V1PipelineRunSpec.  # noqa: E501


        :return: The task_run_template of this V1PipelineRunSpec.  # noqa: E501
        :rtype: V1PipelineTaskRunTemplate
        """
        return self._task_run_template

    @task_run_template.setter
    def task_run_template(self, task_run_template):
        """Sets the task_run_template of this V1PipelineRunSpec.


        :param task_run_template: The task_run_template of this V1PipelineRunSpec.  # noqa: E501
        :type: V1PipelineTaskRunTemplate
        """

        self._task_run_template = task_run_template

    @property
    def timeouts(self):
        """Gets the timeouts of this V1PipelineRunSpec.  # noqa: E501


        :return: The timeouts of this V1PipelineRunSpec.  # noqa: E501
        :rtype: V1TimeoutFields
        """
        return self._timeouts

    @timeouts.setter
    def timeouts(self, timeouts):
        """Sets the timeouts of this V1PipelineRunSpec.


        :param timeouts: The timeouts of this V1PipelineRunSpec.  # noqa: E501
        :type: V1TimeoutFields
        """

        self._timeouts = timeouts

    @property
    def workspaces(self):
        """Gets the workspaces of this V1PipelineRunSpec.  # noqa: E501

        Workspaces holds a set of workspace bindings that must match names with those declared in the pipeline.  # noqa: E501

        :return: The workspaces of this V1PipelineRunSpec.  # noqa: E501
        :rtype: list[V1WorkspaceBinding]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this V1PipelineRunSpec.

        Workspaces holds a set of workspace bindings that must match names with those declared in the pipeline.  # noqa: E501

        :param workspaces: The workspaces of this V1PipelineRunSpec.  # noqa: E501
        :type: list[V1WorkspaceBinding]
        """

        self._workspaces = workspaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PipelineRunSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1PipelineRunSpec):
            return True

        return self.to_dict() != other.to_dict()

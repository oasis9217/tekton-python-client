# Copyright 2021 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Tekton

    Tekton Pipeline  # noqa: E501

    The version of the OpenAPI document: v0.17.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tekton_pipeline.configuration import Configuration


class V1PipelineTaskRunSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'compute_resources': 'V1ResourceRequirements',
        'metadata': 'V1PipelineTaskMetadata',
        'pipeline_task_name': 'str',
        'pod_template': 'PodTemplate',
        'service_account_name': 'str',
        'sidecar_specs': 'list[V1TaskRunSidecarSpec]',
        'step_specs': 'list[V1TaskRunStepSpec]'
    }

    attribute_map = {
        'compute_resources': 'computeResources',
        'metadata': 'metadata',
        'pipeline_task_name': 'pipelineTaskName',
        'pod_template': 'podTemplate',
        'service_account_name': 'serviceAccountName',
        'sidecar_specs': 'sidecarSpecs',
        'step_specs': 'stepSpecs'
    }

    def __init__(self, compute_resources=None, metadata=None, pipeline_task_name=None, pod_template=None, service_account_name=None, sidecar_specs=None, step_specs=None, local_vars_configuration=None):  # noqa: E501
        """V1PipelineTaskRunSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._compute_resources = None
        self._metadata = None
        self._pipeline_task_name = None
        self._pod_template = None
        self._service_account_name = None
        self._sidecar_specs = None
        self._step_specs = None
        self.discriminator = None

        if compute_resources is not None:
            self.compute_resources = compute_resources
        if metadata is not None:
            self.metadata = metadata
        if pipeline_task_name is not None:
            self.pipeline_task_name = pipeline_task_name
        if pod_template is not None:
            self.pod_template = pod_template
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if sidecar_specs is not None:
            self.sidecar_specs = sidecar_specs
        if step_specs is not None:
            self.step_specs = step_specs

    @property
    def compute_resources(self):
        """Gets the compute_resources of this V1PipelineTaskRunSpec.  # noqa: E501


        :return: The compute_resources of this V1PipelineTaskRunSpec.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._compute_resources

    @compute_resources.setter
    def compute_resources(self, compute_resources):
        """Sets the compute_resources of this V1PipelineTaskRunSpec.


        :param compute_resources: The compute_resources of this V1PipelineTaskRunSpec.  # noqa: E501
        :type: V1ResourceRequirements
        """

        self._compute_resources = compute_resources

    @property
    def metadata(self):
        """Gets the metadata of this V1PipelineTaskRunSpec.  # noqa: E501


        :return: The metadata of this V1PipelineTaskRunSpec.  # noqa: E501
        :rtype: V1PipelineTaskMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1PipelineTaskRunSpec.


        :param metadata: The metadata of this V1PipelineTaskRunSpec.  # noqa: E501
        :type: V1PipelineTaskMetadata
        """

        self._metadata = metadata

    @property
    def pipeline_task_name(self):
        """Gets the pipeline_task_name of this V1PipelineTaskRunSpec.  # noqa: E501


        :return: The pipeline_task_name of this V1PipelineTaskRunSpec.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_task_name

    @pipeline_task_name.setter
    def pipeline_task_name(self, pipeline_task_name):
        """Sets the pipeline_task_name of this V1PipelineTaskRunSpec.


        :param pipeline_task_name: The pipeline_task_name of this V1PipelineTaskRunSpec.  # noqa: E501
        :type: str
        """

        self._pipeline_task_name = pipeline_task_name

    @property
    def pod_template(self):
        """Gets the pod_template of this V1PipelineTaskRunSpec.  # noqa: E501


        :return: The pod_template of this V1PipelineTaskRunSpec.  # noqa: E501
        :rtype: PodTemplate
        """
        return self._pod_template

    @pod_template.setter
    def pod_template(self, pod_template):
        """Sets the pod_template of this V1PipelineTaskRunSpec.


        :param pod_template: The pod_template of this V1PipelineTaskRunSpec.  # noqa: E501
        :type: PodTemplate
        """

        self._pod_template = pod_template

    @property
    def service_account_name(self):
        """Gets the service_account_name of this V1PipelineTaskRunSpec.  # noqa: E501


        :return: The service_account_name of this V1PipelineTaskRunSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this V1PipelineTaskRunSpec.


        :param service_account_name: The service_account_name of this V1PipelineTaskRunSpec.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def sidecar_specs(self):
        """Gets the sidecar_specs of this V1PipelineTaskRunSpec.  # noqa: E501


        :return: The sidecar_specs of this V1PipelineTaskRunSpec.  # noqa: E501
        :rtype: list[V1TaskRunSidecarSpec]
        """
        return self._sidecar_specs

    @sidecar_specs.setter
    def sidecar_specs(self, sidecar_specs):
        """Sets the sidecar_specs of this V1PipelineTaskRunSpec.


        :param sidecar_specs: The sidecar_specs of this V1PipelineTaskRunSpec.  # noqa: E501
        :type: list[V1TaskRunSidecarSpec]
        """

        self._sidecar_specs = sidecar_specs

    @property
    def step_specs(self):
        """Gets the step_specs of this V1PipelineTaskRunSpec.  # noqa: E501


        :return: The step_specs of this V1PipelineTaskRunSpec.  # noqa: E501
        :rtype: list[V1TaskRunStepSpec]
        """
        return self._step_specs

    @step_specs.setter
    def step_specs(self, step_specs):
        """Sets the step_specs of this V1PipelineTaskRunSpec.


        :param step_specs: The step_specs of this V1PipelineTaskRunSpec.  # noqa: E501
        :type: list[V1TaskRunStepSpec]
        """

        self._step_specs = step_specs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PipelineTaskRunSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1PipelineTaskRunSpec):
            return True

        return self.to_dict() != other.to_dict()
